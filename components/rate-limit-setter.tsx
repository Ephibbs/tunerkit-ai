/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/YrGCBiQkbd4
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { createClient } from "@/utils/supabase/client"

export function RateLimitSetter({projectId, rateLimit, ratePeriod, unit, type}: any) {
  const supabase = createClient();
  const [value, setValue] = useState(rateLimit)
  const [timeUnit, setTimeUnit] = useState(ratePeriod)
  const [rateUnit, setRateUnit] = useState(unit)

  const [timer, setTimer] = useState<NodeJS.Timeout | null>(null);

  const setRateValue = (value: string) => {
    if (rateUnit === 'requests') {
      setValue(Number(value))
    } else {
      setValue(Number(value) * 100)
    }
  }

  const saveValue = async () => {
    console.log('Saving value:', projectId, value, timeUnit, rateUnit)
    let result;
    if (type === 'project_user') {
      result = await supabase.from('projects').update({
        user_rate_limit: value,
        user_rate_period: timeUnit,
      }).eq('id', projectId)
    } else if (type === 'project') {
      result = await supabase.from('projects').update({
        rate_limit: value,
        rate_period: timeUnit,
      }).eq('id', projectId)
    }
    console.log('Value saved:', projectId, value, timeUnit, rateUnit, result);
  }

  const setSaveTimer = () => {
    if (timer) {
      clearTimeout(timer);
      console.log('Timer reset');
    }
    setTimer(setTimeout(saveValue, 1000));
  };

  useEffect(() => {
    setSaveTimer();
  }, [value, timeUnit, rateUnit]);

  const rateValue = rateUnit === 'cents' ? value / 100 : Math.round(value)

  return (
    <div className="bg-background rounded-lg border p-4 w-full max-w-md">
      <div className="grid gap-3">
        <div className="flex items-center justify-center gap-2">
          {
            rateUnit === 'cents' &&
            <p>
              $
            </p>
          }
          <Input
            id="value"
            type="number"
            step={rateUnit === 'cents' ? 0.01 : 1}
            value={rateValue}
            onChange={(e) => setRateValue(e.target.value)}
            className="w-24 text-right"
          />
          {
            rateUnit === 'requests' &&
            <>
            <Label htmlFor="value" className="block font-medium">
              request{value > 1 ? 's' : ''} each
            </Label>
            </>
          }
          {
            rateUnit === 'cents' &&
            <>
              <Label htmlFor="value" className="block font-medium">
                each
              </Label>
            </>
          }
          <Select value={timeUnit} onValueChange={(value) => setTimeUnit(value)}>
            <SelectTrigger className="w-[100px]">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="minute">minute</SelectItem>
              <SelectItem value="hour">hour</SelectItem>
              <SelectItem value="day">day</SelectItem>
              <SelectItem value="week">week</SelectItem>
              <SelectItem value="month">month</SelectItem>
            </SelectContent>
          </Select>
        </div>
        {
          rateUnit === 'requests' &&
          <button onClick={() => setRateUnit('cents')} className="text-blue-500 p-1 ml-2 rounded-md text-xs">
            limit by cost
          </button>
        }
        {
          rateUnit === 'cents' &&
          <>
            <button onClick={() => setRateUnit('requests')} className="text-blue-500 p-1 ml-2 rounded-md text-xs">
              limit by requests
            </button>
          </>
        }
      </div>
    </div>
  )
}

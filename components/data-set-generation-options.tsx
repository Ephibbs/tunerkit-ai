'use client'
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/VJRcKRIqIQt
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { useState } from "react"
import { Label } from "@/components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  SelectGroup,
  SelectLabel,
} from "@/components/ui/select"
import {
  MultiSelector,
  MultiSelectorTrigger,
  MultiSelectorInput,
  MultiSelectorContent,
  MultiSelectorList,
  MultiSelectorItem,
} from "@/components/ui/multi-select";
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import {JudgeDialogButton} from "@/components/new-judge-dialog"
import {ToolDialogButton} from "@/components/new-tool-dialog"
import { createClient } from "@/utils/supabase/client"
import { useRouter } from "next/navigation"

const supabase = createClient()

export function DataSetGenerationOptions({ project, initialToolOptions, initialJudgeOptions, userListOptions}: {
  project: any,
  initialToolOptions: any[],
  initialJudgeOptions: any[],
  userListOptions: string[]
}) {
  const [prompt, setPrompt] = useState('');
  const [tools, setTools] = useState([]);
  const [name, setName] = useState('');
  const [toolOptions, setToolOptions] = useState(initialToolOptions);
  const [judges, setJudges] = useState([]);
  const [judgeOptions, setJudgeOptions] = useState(initialJudgeOptions);
  const [userList, setUserList] = useState(null);
  const [generations, setGenerations] = useState(10);
  const [messages, setMessages] = useState(5);
  const router = useRouter()

  const onSubmit = async () => {
    console.log({
      prompt: prompt,
      tools,
      judges,
      userList,
      generations: generations,
      messages: messages,
    });

    const { data: { session } } = await supabase.auth.getSession()
    const token = session?.access_token
    console.log('token', token)

    fetch('/api/generate-dataset', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify({
        prompt: prompt,
        tools: tools,
        judges: judges,
        userList: userList,
        numGenerations: generations,
        numMessages: messages,
        name: name,
      }),
    })
    .then((response) => response.json())
    .then((data) => {
      router.push(`/app/datasets/${data.dataset.id}`)
      console.log('Success:', data);

    })
    .catch((error) => {
      console.error('Error:', error);
    });
  }

  const newTool = (tool: any) => {
    // does tool already exist in toolOptions
    if (toolOptions.find((t) => t.id === tool.id)) return
    tool = { ...tool, id: toolOptions.length + 1 }
    setTools([...tools, tool.id]);
    setToolOptions([...toolOptions, tool]);
  }

  const newJudge = (judge: any) => {
    // does judge already exist in judgeOptions
    if (judgeOptions.find((t) => t.id === judge.id)) return
    judge = { ...judge, id: judgeOptions.length + 1 }
    setJudges([...judges, judge.id]);
    setJudgeOptions([...judgeOptions, judge]);
  }

  return (
    <div className="flex flex-col gap-6 max-w-4xl p-6 md:p-10">
      <div>
        <Label htmlFor="project">Name</Label>
        <Input id="project" type="text" placeholder="Enter project name" value={name} onChange={(e) => setName(e.target.value)} />
      </div>
      <div>
        <Label htmlFor="prompt">Text Prompt</Label>
        <Textarea id="prompt" placeholder="Enter your text prompt" className="h-32" defaultValue={prompt} onChange={(e) => setPrompt(e.target.value)} />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <div className="flex items-center justify-between border-b-[1px] p-2">
            <Label htmlFor="functions">Tools</Label>
            <ToolDialogButton onSave={newTool} />
          </div>
          <ul>
            {
              toolOptions?.map((option) => (
                <li key={option.id} className="flex items-center gap-2 p-2">
                  <input type="checkbox" id={option.id} name={option.id} value={
                    option.name in tools ? 'checked' : ''
                  } onChange={(e) => {
                    if (e.target.checked) {
                      setTools([...tools, option.name]);
                    } else {
                      setTools(tools.filter((tool) => tool !== option.id));
                    }
                  }} />
                  <label htmlFor={option}>{option.name}</label>
                  <ToolDialogButton onSave={newTool} tool={option} />
                </li>
              ))
            }
            {
              (!toolOptions || toolOptions?.length === 0) &&
              <li className="w-full text-center mt-2 text-sm">No tools</li>
            }
          </ul>
        </div>
        <div>
          <div className="flex items-center justify-between border-b-[1px] p-2">
            <Label htmlFor="judges">Judges</Label>
            <JudgeDialogButton onSave={newJudge} />
            {/* <button onClick={newJudge} className="p-1 bg-blue-500 text-white text-xs rounded-md ml-2">
              New judge
            </button> */}
          </div>
          <ul>
            {
              judgeOptions?.map((option) => (
                <li key={option.id} className="flex items-center gap-2 p-2">
                  <input type="checkbox" id={option.id} name={option.id} value={
                    option.id in tools ? 'checked' : ''
                  } onChange={(e) => {
                    if (e.target.checked) {
                      setJudges([...judges, option.id]);
                    } else {
                      setJudges(judges.filter((judge) => judge !== option.id));
                    }
                  }} />
                  <label htmlFor={option}>{option.name}</label>
                  <JudgeDialogButton onSave={newJudge} judge={option} />
                </li>
              ))
            }
            {
              (!judgeOptions || judgeOptions?.length === 0) &&
              <li className="w-full text-center mt-2 text-sm">No judges</li>
            }
          </ul>
        </div>
      </div>
      <div>
        <Label htmlFor="dataset">User List</Label>
        <Select value={userList || ''} onValueChange={(value) => setUserList(value)}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select" />
          </SelectTrigger>
          <SelectContent>
            <SelectGroup>
              {
                userListOptions.length === 0 &&
                <SelectLabel><Link href="/app/user-lists/new">Create a new user list</Link></SelectLabel>
              }
              {userListOptions.map((option) => (
                <SelectItem key={option.name} value={option.name}>
                  {option.name}
                </SelectItem>
              ))}
            </SelectGroup>
          </SelectContent>
        </Select>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <Label htmlFor="generations">Conversation generations</Label>
          <Input
            id="generations"
            type="number"
            placeholder="Enter number of conversations to generate"
            onChange={(e) => setGenerations(parseInt(e.target.value))}
            min={1}
            max={100}
            defaultValue={10}
          />
        </div>
        <div>
          <Label htmlFor="messages">Max user messages per conversation</Label>
          <Input id="messages" type="number" placeholder="Enter max messages" min={1} max={20} defaultValue={10} 
            onChange={(e) => setMessages(parseInt(e.target.value))}
          />
        </div>
      </div>
      <div className="flex justify-end">
        <Button onClick={onSubmit} className="w-full md:w-auto">
          Generate dataset
        </Button>
      </div>
    </div>
  )
}
